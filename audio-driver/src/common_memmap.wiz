// Common addresses, sizes and banks used by the loader and the audio driver.
//
// SPDX-FileCopyrightText: © 2023 Marcus Rowe <undisbeliever@gmail.com>
// SPDX-License-Identifier: Zlib
//
// Copyright © 2023 Marcus Rowe <undisbeliever@gmail.com>
//
// This software is provided 'as-is', without any express or implied warranty.  In
// no event will the authors be held liable for any damages arising from the use of
// this software.
//
// Permission is granted to anyone to use this software for any purpose, including
// commercial applications, and to alter it and redistribute it freely, subject to
// the following restrictions:
//
//      1. The origin of this software must not be misrepresented; you must not
//         claim that you wrote the original software. If you use this software in
//         a product, an acknowledgment in the product documentation would be
//         appreciated but is not required.
//
//      2. Altered source versions must be plainly marked as such, and must not be
//         misrepresented as being the original software.
//
//      3. This notice may not be removed or altered from any source distribution.


// LOADER_ADDR must match LOADER_ADDR in the 65816 APIs
let LOADER_ADDR = 0x200;
let LOADER_SIZE =  116;     // MUST be even

// ::SHOULDDO shrink stack size::
let STACK_SIZE = 0x20;
let STACK_BOTTOM_ADDR = 0x200 - STACK_SIZE;

let FIRSTPAGE_SIZE = 0x100 - STACK_SIZE;

let BC_CHANNEL_STACK_SIZE = 21;
let BC_CHANNEL_STACK_OFFSET = 6;

let LAST_VAR_PAGE_SIZE = (BC_CHANNEL_STACK_SIZE + 9) * 10;

// The -28 ensures the pitch-table and BRR directory is page aligned
// `COMMON_DATA_ADDR` MUST be an even address (The loader only works with even addresses).
//
// If this constant is modified, the following must also be updated:
//   * `addresses::COMMON_DATA` in `crates/compiler/src/driver_constants.rs`
//   * The Tad_AudioDriver_SIZE assert in `ca65-api/tad-audio.s`
//   * The Tad_AudioDriver_SIZE assert in `64tass-api/tad-process.inc`
let COMMON_DATA_ADDR = 0x1000 - 28;

// `CODE_ADDR` MUST be an even address (The loader only works with even addresses)
let CODE_ADDR = 0x200 + LOADER_SIZE;
let CODE_SIZE = COMMON_DATA_ADDR - CODE_ADDR - LAST_VAR_PAGE_SIZE;


bank zeropage        @ 0x0000 : [vardata;     0x00eb];
bank loader_zeropage @ 0x00eb : [vardata;     0x0005];
// addresses 0x00f0 - 0x00ff contains registers

bank firstpage       @ 0x0100 : [vardata; FIRSTPAGE_SIZE];

bank stack           @ STACK_BOTTOM_ADDR : [vardata; STACK_SIZE];


in loader_zeropage {
    // Global volumes.
    //
    // Stored here so they are unchanged when a new song or common-audio-data is loaded.
    //
    // If global-volume is 0, the channel volume is unchanged.
    var globalVolume_music : u8;
    var globalVolume_sfx : u8;

    // The address of the song data
    var __loader_songPtr : *const u8;

    // The `LoaderDataType` value sent to the loader.
    //
    // Used as a Mono/Stereo flag.
    //
    // Set by the loader:
    //   Advantages: Simpler and uses less code space (no IoCommand for to set/clear stereoFlag).
    //   Disadvantages: Stereo flag is not set until a song is loaded.
    var __loader_dataType : u8;
}

// Provide read-only access to loader variables `audio-driver.wiz`
extern const songPtr @ &__loader_songPtr : *const u8;
extern const loaderDataType @ &__loader_dataType : u8;


