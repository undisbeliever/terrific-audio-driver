// Data loader
//
// SPDX-FileCopyrightText: © 2023 Marcus Rowe <undisbeliever@gmail.com>
// SPDX-License-Identifier: Zlib
//
// Copyright © 2023 Marcus Rowe <undisbeliever@gmail.com>
//
// This software is provided 'as-is', without any express or implied warranty.  In
// no event will the authors be held liable for any damages arising from the use of
// this software.
//
// Permission is granted to anyone to use this software for any purpose, including
// commercial applications, and to alter it and redistribute it freely, subject to
// the following restrictions:
//
//      1. The origin of this software must not be misrepresented; you must not
//         claim that you wrote the original software. If you use this software in
//         a product, an acknowledgment in the product documentation would be
//         appreciated but is not required.
//
//      2. Altered source versions must be plainly marked as such, and must not be
//         misrepresented as being the original software.
//
//      3. This notice may not be removed or altered from any source distribution.


import "registers";
import "io-commands";
import "common_memmap";

config {
    trim = true
}

bank loader_code     @ LOADER_ADDR : [varinitdata; LOADER_SIZE];

in loader_zeropage {
    // Allow the loader to read/write loader variables
    var _songPtr : *u8 in __loader_songPtr;
    var _dataType : u8 in __loader_dataType;
}


in loader_code {

// MUST be the first thing in the loader_code bank
#[fallthrough]
func start_loader() {
    sp = x = 0xff;
    direct_page = false;

    // Soft reset the DSP
    smp.dsp_addr = GlobalDspAddr.FLG as u8;
    smp.dsp_data = dsp.FLG__SOFT_RESET | dsp.FLG__MUTE_ALL | dsp.FLG__ECHO_DISABLE;


    // Clear IO ports
    smp.control = smp.CONTROL__RESET_PORTS_01 | smp.CONTROL__RESET_PORTS_23;

    // Tell the S-CPU the S-SMP is running the loader.
    a = IO.Loader.LOADER_READY_L;
    IO.ToScpu.mode = a;

    // Send 'ready' signal
    // a is LOADER_READY_L;
    y = IO.Loader.LOADER_READY_H;
    IO.Loader.Init_ToScpu.ready_hl = ya;

    // Wait for S-CPU to respond to the ready signal
    do {
    } while ya != IO.Loader.Init_ToLoader.ready_hl;

    // retrieve LoaderDataType from S-CPU
    _dataType = y = IO.Loader.Init_ToLoader.loader_data_type;

    // Get the address to store the data
    // Assumes LoaderDataType.PLAY_SONG_BIT == 7
    if zero {
        // Clear global volume
        // Assumes `&globalVolume_music + 1 == &globalVolume_sfx`
        a = y;
        *(&globalVolume_music as *u16) = ya;

        a = <:CODE_ADDR;
        y = >:CODE_ADDR;
    }
    else if !negative {
        a = <:COMMON_DATA_ADDR;
        y = >:COMMON_DATA_ADDR;
    }
    else {
        // Assumes `_songPtr` is even
        ya = _songPtr as u16;
    }

    // Write high byte of the address to the two `MOV !abs+Y, A` instructions.
    (&STA_1 as *u8)[2] = y;
    (&STA_2 as *u8)[2] = y;
    y = a;

    // Acknowledge LoaderDataType
    // And override the `RD` ready signal.
    IO.Loader.InitAck_ToScpu.data_type_ack = IO.Loader.InitAck_ToScpu.ACK_VALUE;

    x = IO.Loader.LOADER_READY_H;

    // Have to use a manual loop so the above code has access to the `STA_1` and `STA_2` labels.
    Loop:
        // Y = low byte of data address
        // X = last value written to IO port 3

        // Wait until S-CPU has written the data to the IO ports
        do {
        } while x == IO.Loader.Transfer_ToLoader.spinlock;

        // Check if this data is correct, and get the byte to send back to the S-CPU
        x = IO.Loader.Transfer_ToLoader.spinlock;
        // Transfer is complete when spinlock is negative.
        goto EndLoop if negative;


        // Read data from the IO ports
        a = IO.Loader.Transfer_ToLoader.data_l;
    STA_1:
        (0xFF00 as *u8)[y] = a;

        a = IO.Loader.Transfer_ToLoader.data_h;


        // Acknowledge data (S-CPU will start loading new data)
        IO.Loader.Transfer_ToScpu.spinlock_ack = x;


        // This code is executed while the S-CPU loads the next data into ports 0 & 1
        y++;
    STA_2:
        (0xFF00 as *u8)[y] = a;
        y++;

        goto Loop if !zero;
            (&STA_1 as *u8)[2]++;
            (&STA_2 as *u8)[2]++;
            goto Loop;
EndLoop:

    // Y = low byte of data address

    // Acknowledge end of data
    // (x is negative)
    IO.Loader.Transfer_ToScpu.spinlock_ack = x;

    // Restart loader if the SWITCH_TO_LOADER_BIT is set
    a = x & (1 << IO.ToDriver._SWITCH_TO_LOADER_BIT);
    goto start_loader if !zero;


    x = _dataType;
    if x == LoaderDataType.COMMON_DATA {
        // Save current data address in `songPtr`
        a = y;
        y = (&STA_1 as *u8)[2];

        _songPtr = ya as *u8;
    }

    // Assumes LoaderDataType.PLAY_SONG_BIT == 7
    a = x;
    goto start_loader if !negative;

// Fallthrough into main() in `audio-engine.wiz`
}

}

