// S-CPU/SPC700 communication protocol definitions
//
// SPDX-FileCopyrightText: © 2023 Marcus Rowe <undisbeliever@gmail.com>
// SPDX-License-Identifier: Zlib
//
// Copyright © 2023 Marcus Rowe <undisbeliever@gmail.com>
//
// This software is provided 'as-is', without any express or implied warranty.  In
// no event will the authors be held liable for any damages arising from the use of
// this software.
//
// Permission is granted to anyone to use this software for any purpose, including
// commercial applications, and to alter it and redistribute it freely, subject to
// the following restrictions:
//
//      1. The origin of this software must not be misrepresented; you must not
//         claim that you wrote the original software. If you use this software in
//         a product, an acknowledgment in the product documentation would be
//         appreciated but is not required.
//
//      2. Altered source versions must be plainly marked as such, and must not be
//         misrepresented as being the original software.
//
//      3. This notice may not be removed or altered from any source distribution.


import "registers";


// This constant MUST be increased if `LOADER_ADDR` or the IO Communication protocol changes.
let TAD_IO_VERSION = 16;


// Loader Commands
// ===============

namespace LoaderDataType {
    // The `audio-driver.bin` file.
    // MUST be loaded first.
    let CODE        = 0;

    // Common audio data.
    // Contains samples, pitch table and sound effects.
    // MUST be loaded after `LoaderDataType.CODE` and before song data.
    let COMMON_DATA = 1;

    // Any value over `MIN_SONG_VALUE` will load song data
    // Song data MUST be loaded after `LoaderDataType.COMMON_DATA`.
    let MIN_SONG_VALUE = 2;

    // The stereo flag is set by the loader when the song is loaded into memory.
    let MONO_SONG_DATA   = MIN_SONG_VALUE;
    let STEREO_SONG_DATA = MIN_SONG_VALUE | 0x80;


    // If this bit is set, the song will be played in stereo.
    // If this bit is clear, the song will be played in mono.
    //
    // MUST NOT be set when loading code or common-audio-data.
    let STEREO_FLAG_BIT = 7;

    // If this bit is set, the song will play after the echo buffer has been cleared.
    // If this bit is clear, the audio driver will start in a paused state.
    //
    // MUST NOT be set when loading code or common-audio-data.
    let PLAY_SONG_BIT = 5;
}


// IO Commands
// ===========


namespace IO {
    namespace Loader {
        // Port 0 is MUST be unused.
        // MUST only be used for `ToDriver.command` and `ToScpu.command_ack`.

        // The loader ready signal.
        //
        // To prevent conflicts with `Transfer_ToLoader.spinlock` or `ToDriver.switch_to_loader`:
        //   * bit 7 must be clear (end of transfer bit)
        //   * bit 6 should be set (so `Transfer_ToLoader.spinlock is never LOADER_READY if the counter MASK is used)
        //   * bit 5 must be clear (`ToDriver.SWITCH_TO_LOADER_BIT`)
        let LOADER_READY_L = 0b01001100;    // 'L'
        let LOADER_READY_H = 0b01000100;    // 'D'

        // Step 1: S-CPU waits until ready signal is set by the loader
        namespace Init_ToScpu {
            // Signal to the S-CPU that the loader is ready to receive data.
            // MUST wait until `ready` matches `LOADER_READY` before writing `InitToDriver` data.
            extern writeonly ready_l        @ &smp.io_port_out_2 : u8;
            extern writeonly ready_h        @ &smp.io_port_out_3 : u8;

            extern writeonly ready_hl       @ &smp.io_port_out_23 : u16;
        }

        // Step 2: S-CPU writes the following to the IO ports
        namespace Init_ToLoader {
            // The LoaderDataType to transfer to audio-RAM.
            // MUST be written first
            extern const loader_data_type   @ &smp.io_port_in_1 : u8;

            // Signal to the loader that the S-CPU is ready to receive data.
            extern const ready_l            @ &smp.io_port_in_2 : u8;
            extern const ready_h            @ &smp.io_port_in_3 : u8;

            extern const ready_hl           @ &smp.io_port_out_23 : u16;
        }

        // Step 3: S-CPU waits until `Init_ToDriver` data is acknowledged
        //         by waiting until `data_type_ack` is zero.
        namespace InitAck_ToScpu {
            let ACK_VALUE = 0;
            extern writeonly data_type_ack  @ &smp.io_port_out_3 : u8;
        }

        // Step 4: S-CPU writes the next word to transfer to Audio-RAM to the following IO ports:
        namespace Transfer_ToLoader {
            // Should be written one byte at a time
            extern const data_l             @ &smp.io_port_in_1 : u8;
            extern const data_h             @ &smp.io_port_in_2 : u8;

            // Write a different value to this port to signal the data is ready.
            //
            // MUST be written last.
            //
            // Data format:
            //      e0l0cccc
            //          e    = end of transfer.
            //          l    = switch to loader bit
            //          cccc = incrementing 4 bit counter.
            //
            // If the MSB is set, no data is written to the Audio-RAM and the transfer is complete.
            //
            // If the *switch-to-loader* and *end-of-transfer* bits are set, the loader will restart.
            extern const spinlock           @ &smp.io_port_in_3 : u8;

            let SPINLOCK_MASK = 0x0f;
            let SPINLOCK_COMPLETE = 0x80;
            let SPINLOCK__SWITCH_TO_LOADER_BIT = IO.ToDriver._SWITCH_TO_LOADER_BIT;
        }

        // Step 5: S-CPU waits until `Transfer_ToLoader` is acknowledged
        //         by waiting until `spinlock_ack` == `spinlock`.
        namespace Transfer_ToScpu {
            extern writeonly spinlock_ack   @ &smp.io_port_out_3 : u8;
        }

        // Step 6: If there is more data to transfer, goto step 4

        // Step 7: The S-CPU writes `Transfer_ToLoader.SPINLOCK_COMPLETE` to `Transfer_ToLoader.spinlock`.

        // Step 8: The S-CPU waits until `Transfer_ToScpu.spinlock_ack == Transfer_ToScpu.SPINLOCK_COMPLETE`

        // Step 9: If `LoaderDataType` is not song goto Step 1.
        //         If `LoaderDataType` is a song, the audio driver is executed..
    }

    namespace ToDriver {
        // The command to execute.
        //
        //      iii0ccci
        //          ccc = command
        //            0 = reserved for future expansion
        //            i = command id, MUST be different on every command.
        //                Used to detect when a new command has been sent to the driver.
        //
        // NOTES:
        //  * The command will only be execute if the `command` byte has changed.
        //  * This value MUST be written last.
        //  * The command and parameter bytes MUST NOT change unless the previous command
        //    has been acknowledged.
        extern const command @ &smp.io_port_in_0 : u8;

        let N_COMMANDS = 8;
        let COMMAND_MASK   = 0b00001110;
        let COMMAND_I_MASK = 0b11100001;

        // The two command parameter bytes
        extern const parameter0 @ &smp.io_port_in_1 : u8;
        extern const parameter1 @ &smp.io_port_in_2 : u8;


        // Writing `SWITCH_TO_LOADER` to this port should stop execution and start the loader.
        //
        // If the audio-driver is running; if the `_SWITCH_TO_LOADER_BIT` is set,
        // the audio driver will stop and execute the loader.
        //
        // If the loader is in the middle of a transfer and both the `_SWITCH_TO_LOADER_BIT`
        // and MSB (bit 7) bits are set, the loader will restart.
        extern const switch_to_loader @ &smp.io_port_in_3 : u8;

        let _SWITCH_TO_LOADER_BIT = 5;
        let SWITCH_TO_LOADER = 0x80 | (1 << _SWITCH_TO_LOADER_BIT);
    }

    namespace ToScpu {
        // Audio driver command acknowledgment.
        //
        // Acknowledgment of the `ToDriver.command` byte.  Not used in the loader.
        //
        // After the command has been processed, the `IO.ToDriver.command` value will be written to this port.
        extern writeonly command_ack @ &smp.io_port_out_0 : u8;


        // The mode the S-SMP is currently executing.
        //
        // Used by both the loader and the audio-driver.
        //
        // NOTE: The IPL sets this value after at has cleared the zero-page.
        //       Do not read this value immediately after reset.
        //       Make sure enough time has passed for the IPL to set IO Port 1
        //       to 0xbb before reading this port.
        extern writeonly mode @ &smp.io_port_out_1 : u8;

        // The S-SMP is at the start of the IPL, waiting for the ready signal.
        let MODE_IPL = 0xbb;

        // The S-SMP is running the loader.
        let MODE_LOADER = 0x4c;         // 'L', Loader.LOADER_READY_L

        // The S-SMP is running the audio-driver.
        let MODE_AUDIO_DRIVER = 0x61 ;  // 'a'
    }

    // MUST match CommandFunctionTable in `audio-driver.wiz`.
    enum Command : u8 {
        // Pause the song and sound effect channels.
        // * Commands will still be executed when the audio-driver is paused.
        // * The audio driver starts paused unless the `LoaderDataType.PLAY_SONG_BIT` is set.
        PAUSE = 0,

        // Pauses the music channels, sound effects will continue to play.
        // Unpauses the sound effects channels.
        PAUSE_MUSIC_PLAY_SFX = 2,

        // Unpauses the music and sound effect channels.
        UNPAUSE = 4,

        // Play a sound effect
        //  * parameter0: sound effect id
        //  * parameter1: pan (0-128) (not bounds checked)
        PLAY_SOUND_EFFECT = 6,

        // Stop all active sound effects
        STOP_SOUND_EFFECTS = 8,

        // Set the main volume
        //  * parameter0: signed i8 volume
        //
        // NOTE: The main volume is reset whenever a new song is loaded.
        SET_MAIN_VOLUME = 10,

        // Enables or disable music channels.
        //  * parameter0: A bitmask of the 8 music channels that can send key-on events
        //
        // Disabled channels will be keyed-off.
        //
        // NOTE: The music channels bitmask is reset whenever a new song is loaded.
        SET_MUSIC_CHANNELS = 12,

        // Set the song tempo.
        //  * parameter0: The new S-DSP TIMER_0 register value
        //    (MUST be >= MIN_TICK_CLOCK 64, is bounds checked)
        //
        // NOTE: The song can still change the tempo.
        SET_SONG_TEMPO = 14,
    };
}


